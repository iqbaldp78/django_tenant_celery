"""
Django settings for harpa project.

Generated by 'django-admin startproject' using Django 1.11.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import datetime
# from celery.schedules import crontab

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'y6_7#d9&l^5l5@$ob%4&kk70j@jdmq=h0b(b^9r0$9%@jn#x2%'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition

TENANT_STD_APPS = [
    'tenant_schemas',  # mandatory, should always be before any django app
    'fmw.clients',
    'fmw.applications',
    'fmw.users_multi_tenant',
]

STD_DJANGO_APPS = [
    'django.contrib.admin',
    'fmw.users',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_celery_results',
]

OTHER_DJANGO_APPS = [
    'corsheaders',
    'rest_framework',
    'rest_framework_swagger',
    'django_filters',
    'django_cleanup',
]

FMW_APPS = [
    # 'fmw.users',
    'fmw.login',
    'fmw.pages',
    'fmw.lookups',
    'fmw.functions',
    'fmw.roles',
    'fmw.request_groups',
    'fmw.profiles',
    'fmw.user_profiles',
    'fmw.flexfield',
    'fmw.currencies',
    'fmw.fmwMessages',
    'fmw.menus',
    'fmw.auditTrails',
    'fmw.currencyRates',
    'fmw.attachments',
    'fmw.security_profiles',
    'fmw.concurrentManager',
    'fmw.masterConcurrent',
]

HR_APPS = [
    'hr.grades',
    'hr.locations',
    'hr.jobs',
    'hr.organizations',
    'hr.organizationHierarchies',
    'hr.positions',
    'hr.gradeRates',
    'hr.positionHierarchies',
    'hr.calendarEvents',
    'hr.performanceAppraisals',
]

HR_TRANSACTION_APPS = [
    'hrTransaction.employees',
    'hrTransaction.employeePayrolls'
]

PAYROLL_APPS = [
    'payroll.paymentMethods',
    'payroll.payrollGroups',
    'payroll.variables',
    'payroll.componentClassifications',
    'payroll.components',
    'payroll.balances',
    'payroll.userTables',
    'payroll.componentSets',
    'payroll.salaryBases',
    'payroll.componentLinks',
    'payroll.loans',
    'payroll.employmentProcessSets',
    'payroll.payrollFunctions'
]

PAYROLL_TRANSACTION_APPS = [
    'payrollTransaction.componentEntries',
    'payrollTransaction.componentEntryBatches',
    'payrollTransaction.payrollRuns',
    'payrollTransaction.runResults',
    'payrollTransaction.prePayment',
    'payrollTransaction.balanceAccumulator',
    'payrollTransaction.costing',
]

INSTALLED_APPS = TENANT_STD_APPS + STD_DJANGO_APPS + OTHER_DJANGO_APPS + FMW_APPS + HR_APPS + PAYROLL_APPS + HR_TRANSACTION_APPS + PAYROLL_TRANSACTION_APPS
SHARED_APPS = TENANT_STD_APPS + OTHER_DJANGO_APPS
TENANT_APPS = STD_DJANGO_APPS + FMW_APPS + HR_APPS + PAYROLL_APPS + HR_TRANSACTION_APPS + PAYROLL_TRANSACTION_APPS

MIDDLEWARE = [
    'tenant_schemas.middleware.TenantMiddleware',
    'corsheaders.middleware.CorsMiddleware',

    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'harpa.urls'

TENANT_MODEL = "clients.TsClients"  # app.Model
DEFAULT_FILE_STORAGE = 'tenant_schemas.storage.TenantFileSystemStorage'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'harpa.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'tenant_schemas.postgresql_backend',
        'NAME': 'harpa',
        'USER': 'trees_apps',
        'PASSWORD': 'trees_apps',
        'HOST': 'localhost',
        'PORT': '5432',
    },
    # 'default': {
    #     'ENGINE': 'tenant_schemas.postgresql_backend',
    #     'NAME': 'harpa',
    #     'USER': 'trees_apps',
    #     'PASSWORD': 'trees_apps',
    #     'HOST': '192.168.90.112',
    #     'PORT': '5432',
    # },
}

DATABASE_ROUTERS = (
    'tenant_schemas.routers.TenantSyncRouter',
)


#CELERY SET-UP
# CELERY_RESULT_BACKEND = 'django-db'
# CELERY_RESULT_BACKEND = 'django-cache'
CELERY_RESULT_BACKEND = 'db+postgres:///django-db' # results are stored, but can't be accessed

CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'


# redis set up
REDIS_HOST = 'localhost'
REDIS_PORT = '6379'
BROKER_URL = 'redis://' + REDIS_HOST + ':' + REDIS_PORT + '/0'
BROKER_TRANSPORT_OPTIONS = {'visibility_timeout': 3600}
CELERY_RESULT_BACKEND = 'redis://' + REDIS_HOST + ':' + REDIS_PORT + '/0'

# define celery imports
CELERY_IMPORTS = (
    'fmw.concurrentManager.tasks',
    # 'some_app.some_module',
)


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Jakarta'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'

LOGIN_URL = 'login:login'
LOGOUT_URL = 'login-auth:logout'

SWAGGER_SETTINGS = {
    # 'SECURITY_DEFINITIONS': None,
    'SECURITY_DEFINITIONS': {
        'api_key': {
            'type': 'apiKey',
            'in': 'header',
            'name': 'Authorization'
        }
    },
    'USE_SESSION_AUTH': False,
}

MEDIA_ROOT = '/home/applmgr/Python/Harpa/Media/'
MEDIA_URL = 'media/'

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 5,

    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
        # 'rest_framework.permissions.AllowAny',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        # 'rest_framework.authentication.SessionAuthentication',
        # 'rest_framework.authentication.BasicAuthentication',
    ),
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
        # 'rest_framework.filters.OrderingFilter',
        'fmw.utils.filter.RelatedOrderingFilter',
    ),
    # 'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.AcceptHeaderVersioning',
}

CORS_ORIGIN_ALLOW_ALL = True

JWT_AUTH = {
    'JWT_EXPIRATION_DELTA': datetime.timedelta(seconds=60 * 60 * 24),
    'JWT_ALLOW_REFRESH': True,
    'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=7),
}

AUTH_USER_MODEL = 'users.TsUsers'

APPEND_SLASH = False

FIXTURE_DIRS = (
    os.path.join(BASE_DIR, 'applications', 'fixtures', ),
    os.path.join(BASE_DIR, 'lookups', 'fixtures', ),
    os.path.join(BASE_DIR, 'componentClassifications', 'fixtures', ),
    os.path.join(BASE_DIR, 'pages', 'fixtures', ),
    os.path.join(BASE_DIR, 'functions', 'fixtures', ),
    os.path.join(BASE_DIR, 'menus', 'fixtures', ),
    os.path.join(BASE_DIR, 'roles', 'fixtures', ),
    os.path.join(BASE_DIR, 'users', 'fixtures', ),
    os.path.join(BASE_DIR, 'flexfield', 'fixtures', ),
    os.path.join(BASE_DIR, 'balances', 'fixtures', ),
    os.path.join(BASE_DIR, 'payrollFunctions', 'fixtures', ),
    os.path.join(BASE_DIR, 'variables', 'fixtures', ),
)

PUBLIC_TENANT_DOMAIN = 'trees.harpa.com'

# TREES_TENANT_DOMAIN = 'trees.harpa-go.com'
TREES_TENANT_DOMAIN = 'trees.harpa.com'

# python manage.py tenant_command loaddata --schema="main_client" TsLookups
